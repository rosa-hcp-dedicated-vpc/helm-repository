name: Release Charts

on:
  push:
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-charts: ${{ steps.changed-charts.outputs.charts }}
      has-changes: ${{ steps.changed-charts.outputs.has-changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed charts
        id: changed-charts
        run: |
          # Get list of ALL changed files in charts directory
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep "^charts/" || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No chart changes detected"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "charts=[]" >> $GITHUB_OUTPUT
          else
            echo "Changed files in charts:"
            echo "$CHANGED_FILES"
            
            # Extract unique chart names from any changed files in charts/
            CHANGED_CHARTS=$(echo "$CHANGED_FILES" | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]')
            echo "Charts with changes: $CHANGED_CHARTS"
            
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "charts=$CHANGED_CHARTS" >> $GITHUB_OUTPUT
          fi

  release:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        chart: ${{ fromJson(needs.detect-changes.outputs.changed-charts) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "root"
          git config user.email "root@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Validate version bump for ${{ matrix.chart }}
        id: validate-version
        run: |
          echo "🔍 Validating version bump for chart: ${{ matrix.chart }}"
          
          # Check if Chart.yaml was changed
          CHART_YAML_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep "^charts/${{ matrix.chart }}/Chart.yaml$" || true)
          
          # Check if any other files in the chart were changed
          OTHER_FILES_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep "^charts/${{ matrix.chart }}/" | grep -v "^charts/${{ matrix.chart }}/Chart.yaml$" || true)
          
          if [ -n "$OTHER_FILES_CHANGED" ] && [ -z "$CHART_YAML_CHANGED" ]; then
            echo "❌ ERROR: Chart ${{ matrix.chart }} has code changes but Chart.yaml was not modified"
            echo "Changed files:"
            echo "$OTHER_FILES_CHANGED"
            echo "You must bump the version in Chart.yaml when making code changes"
            exit 1
          elif [ -n "$CHART_YAML_CHANGED" ]; then
            # Check if version was actually bumped
            OLD_VERSION=$(git show HEAD~1:charts/${{ matrix.chart }}/Chart.yaml | grep "^version:" | cut -d' ' -f2)
            NEW_VERSION=$(grep "^version:" charts/${{ matrix.chart }}/Chart.yaml | cut -d' ' -f2)
            
            echo "Previous version: $OLD_VERSION"
            echo "Current version: $NEW_VERSION"
            
            if [ "$OLD_VERSION" = "$NEW_VERSION" ]; then
              echo "❌ ERROR: Chart.yaml was modified but version was not bumped"
              echo "Previous: $OLD_VERSION, Current: $NEW_VERSION"
              exit 1
            else
              echo "✅ Version properly bumped from $OLD_VERSION to $NEW_VERSION"
            fi
          else
            echo "ℹ️ No changes detected for chart ${{ matrix.chart }}"
          fi

      - name: Package chart ${{ matrix.chart }}
        if: steps.validate-version.outcome == 'success'
        run: |
          echo "📦 Packaging chart: ${{ matrix.chart }}"
          mkdir -p .cr-release-packages
          helm package charts/${{ matrix.chart }} --destination .cr-release-packages/
          ls -la .cr-release-packages/

      - name: Upload packaged chart
        if: steps.validate-version.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: chart-${{ matrix.chart }}
          path: .cr-release-packages/*.tgz
          retention-days: 1

      - name: Report status
        if: always()
        run: |
          if [ "${{ steps.validate-version.outcome }}" != "success" ]; then
            echo "❌ Chart ${{ matrix.chart }}: Version validation failed - SKIPPED"
          else
            echo "✅ Chart ${{ matrix.chart }}: Validated and packaged successfully"
          fi

  pages-build-deployment:
    needs: [detect-changes, release]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "root"
          git config user.email "root@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Download successfully packaged charts
        uses: actions/download-artifact@v4
        with:
          path: .cr-release-packages
          pattern: chart-*
          merge-multiple: true
        continue-on-error: true

      - name: List charts ready for release
        run: |
          echo "📦 Charts ready for release (only successfully validated ones):"
          if [ -d ".cr-release-packages" ]; then
            ls -la .cr-release-packages/ || echo "No successfully packaged charts found"
            CHART_COUNT=$(ls .cr-release-packages/*.tgz 2>/dev/null | wc -l || echo "0")
            echo "Total charts to release: $CHART_COUNT"
          else
            echo "No charts directory found - no charts passed validation"
          fi

      - name: Run chart-releaser
        if: hashFiles('.cr-release-packages/*.tgz') != ''
        uses: helm/chart-releaser-action@v1.7.0
        with:
          charts_dir: charts
          packages_with_index: true
        env:
          CR_TOKEN: "${{ secrets.HELM }}"

      - name: Summary
        if: always()
        run: |
          echo "## 📊 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Charts Processed:" >> $GITHUB_STEP_SUMMARY
          
          # Count successful and failed charts
          CHANGED_CHARTS='${{ needs.detect-changes.outputs.changed-charts }}'
          echo "Changed charts: $CHANGED_CHARTS" >> $GITHUB_STEP_SUMMARY
          
          if [ -d ".cr-release-packages" ]; then
            RELEASED_COUNT=$(ls .cr-release-packages/*.tgz 2>/dev/null | wc -l || echo "0")
            echo "- ✅ **Successfully released**: $RELEASED_COUNT charts" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **Successfully released**: 0 charts" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- ❌ **Failed validation**: Charts that failed version validation were skipped" >> $GITHUB_STEP_SUMMARY