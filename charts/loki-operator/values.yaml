nameOverride: ""
fullnameOverride: ""

# Sync wave configuration
syncwave: 3

# Loki Stack configuration
lokiStack:
  enabled: true
  name: "openshift-logging-lokistack"
  namespace: "openshift-logging"
  # Size configuration (1x, 1x.demo, 1x.extra-small, 1x.small, 1x.medium)
  size: "1x.small"
  
  # Storage configuration
  storage:
    # Secret containing storage configuration
    secret:
      name: "logging-loki-s3"
      type: "s3"
    # TLS configuration for storage
    tls:
      caName: ""
  
  # Limits configuration
  limits:
    global:
      retention: "744h"  # 31 days
      ingestionRate: 4
      ingestionBurstSize: 6
      maxStreamsPerUser: 10000
      maxLineSize: 256000
      maxQuerySeries: 500
      maxQueryParallelism: 32
      maxQueryTime: "12000s"
      maxQueryLength: "12000s"
      maxEntriesLimitPerQuery: 5000
      maxChunksPerQuery: 2000000
      maxConcurrentTailRequests: 10
      cardinalityLimit: 100000
      maxStreamsMatchersPerQuery: 1000
      maxQueryBytesRead: "1GB"
      maxQuerierBytesRead: "150MB"
    # Per-tenant limits
    tenants:
      application:
        retention: "168h"  # 7 days for application logs
        ingestionRate: 8
        ingestionBurstSize: 16
      infrastructure:
        retention: "744h"  # 31 days for infrastructure logs
        ingestionRate: 4
        ingestionBurstSize: 8
      audit:
        retention: "2160h"  # 90 days for audit logs
        ingestionRate: 2
        ingestionBurstSize: 4
  
  # Tenants configuration
  tenants:
    mode: "openshift-logging"
    authentication:
      - tenantName: "application"
        tenantId: "application"
        oidc:
          secret:
            name: "lokistack-gateway-bearer-token"
      - tenantName: "infrastructure"
        tenantId: "infrastructure"
        oidc:
          secret:
            name: "lokistack-gateway-bearer-token"
      - tenantName: "audit"
        tenantId: "audit"
        oidc:
          secret:
            name: "lokistack-gateway-bearer-token"
    authorization:
      opa:
        url: "http://localhost:8181/v1/data/lokistack/allow"
      roleBindings:
        - name: "application-logs"
          subjects:
            - kind: "User"
              name: "application"
          roles:
            - "read-write"
        - name: "infrastructure-logs"
          subjects:
            - kind: "User"
              name: "infrastructure"
          roles:
            - "read-write"
        - name: "audit-logs"
          subjects:
            - kind: "User"
              name: "audit"
          roles:
            - "read-write"
  
  # Rules configuration
  rules:
    enabled: true
    selector:
      matchLabels:
        loki.grafana.com/name: "openshift-logging-lokistack"
    namespaceSelector:
      matchLabels:
        openshift.io/cluster-monitoring: "true"
  
  # Template configuration for Loki components
  template:
    compactor:
      replicas: 1
      nodeSelector:
        kubernetes.io/os: "linux"
      tolerations:
        - effect: "NoSchedule"
          key: "node-role.kubernetes.io/infra"
          operator: "Exists"
    distributor:
      replicas: 1
      nodeSelector:
        kubernetes.io/os: "linux"
      tolerations:
        - effect: "NoSchedule"
          key: "node-role.kubernetes.io/infra"
          operator: "Exists"
    gateway:
      replicas: 2
      nodeSelector:
        kubernetes.io/os: "linux"
      tolerations:
        - effect: "NoSchedule"
          key: "node-role.kubernetes.io/infra"
          operator: "Exists"
    indexGateway:
      replicas: 1
      nodeSelector:
        kubernetes.io/os: "linux"
      tolerations:
        - effect: "NoSchedule"
          key: "node-role.kubernetes.io/infra"
          operator: "Exists"
    ingester:
      replicas: 1
      nodeSelector:
        kubernetes.io/os: "linux"
      tolerations:
        - effect: "NoSchedule"
          key: "node-role.kubernetes.io/infra"
          operator: "Exists"
    querier:
      replicas: 1
      nodeSelector:
        kubernetes.io/os: "linux"
      tolerations:
        - effect: "NoSchedule"
          key: "node-role.kubernetes.io/infra"
          operator: "Exists"
    queryFrontend:
      replicas: 1
      nodeSelector:
        kubernetes.io/os: "linux"
      tolerations:
        - effect: "NoSchedule"
          key: "node-role.kubernetes.io/infra"
          operator: "Exists"
    ruler:
      replicas: 1
      nodeSelector:
        kubernetes.io/os: "linux"
      tolerations:
        - effect: "NoSchedule"
          key: "node-role.kubernetes.io/infra"
          operator: "Exists"

# Object Storage configuration (S3-compatible)
objectStorage:
  # AWS S3 configuration
  s3:
    enabled: true
    bucketName: "rosa-logging-loki"
    endpoint: "s3.amazonaws.com"
    region: "us-east-1"
    accessKeyId: ""
    secretAccessKey: ""
    # Secret containing S3 credentials
    secret:
      name: "logging-loki-s3"
      key: "access_key_id"
      secretKey: "secret_access_key"

# dependency chart helper-operator
helper-operator:
  operators:
    loki-operator:
      enabled: true
      syncwave: '0'
      namespace:
        name: openshift-operators-redhat
        create: false
      subscription:
        channel: stable-5.9
        approval: Manual
        operatorName: loki-operator
        source: redhat-operators
        sourceNamespace: openshift-marketplace
      operatorgroup:
        create: false
        notownnamespace: true

# dependency chart helper-status-checker
helper-status-checker:
  enabled: true
  approver: true
  checks:
    - operatorName: loki-operator
      subscriptionName: loki-operator
      namespace:
        name: openshift-operators-redhat
      syncwave: 3
      serviceAccount:
        name: "loki-install-check"
