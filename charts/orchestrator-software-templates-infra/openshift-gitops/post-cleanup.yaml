{{- if .Values.openshiftGitops.enabled }}

apiVersion: v1
kind: ServiceAccount
metadata:
  name: csv-cleanup-gitops
  namespace: {{ .Values.openshiftGitops.subscription.namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-delete
    "helm.sh/hook-weight": "10"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: csv-cleanup-role-gitops
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-delete
    "helm.sh/hook-weight": "10"
rules:
  - apiGroups: ["operators.coreos.com"]
    resources: ["clusterserviceversions", "subscriptions"]
    verbs: ["get", "list", "delete", "watch", "patch", "update"]
  - apiGroups: ["argoproj.io"]
    resources: ["argocds", "applications", "appprojects"]
    verbs: ["get", "list", "delete", "watch", "patch", "update"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: csv-cleanup-rolebinding-gitops
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-delete
    "helm.sh/hook-weight": "10"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: csv-cleanup-role-gitops
subjects:
- kind: ServiceAccount
  name: csv-cleanup-gitops
  namespace: {{ .Values.openshiftGitops.subscription.namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: openshift-gitops-cleanup
  namespace: {{ .Values.openshiftGitops.subscription.namespace }}
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
spec:
  template:
    spec:
      serviceAccountName: csv-cleanup-gitops
      restartPolicy: Never
      containers:
      - name: cleanup-gitops
        image: {{ .Values.cleanupContainerImage }}
        env:
          - name: NAMESPACE
            value: {{ .Values.openshiftGitops.subscription.namespace }}
          - name: NAME
            value: {{ .Values.openshiftGitops.subscription.spec.name }}
          - name: ARGOCD_NAME
            value: {{ .Values.openshiftGitops.name }}
          - name: ARGOCD_NAMESPACES
            value: {{ join "," .Values.openshiftGitops.namespaces }}
        resources:
          requests:
            memory: {{ .Values.resources.requests.memory }}
            cpu: {{ .Values.resources.requests.cpu }}
          limits:
            memory: {{ .Values.resources.limits.memory }}
            cpu: {{ .Values.resources.limits.cpu }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        command:
        - /bin/sh
        - -c
        - |
          set +e

          echo "Waiting for Subscription to be deleted..."
          kubectl delete subscription.operators.coreos.com $NAME -n $NAMESPACE --ignore-not-found
          kubectl wait --for=delete subscription.operators.coreos.com/$NAME -n $NAMESPACE --timeout=30s || echo "Subscription deletion timed out, continuing..."

          echo "Waiting for CSV to be deleted..."
          kubectl delete csv -l operators.coreos.com/$NAME.$NAMESPACE='' -n $NAMESPACE --ignore-not-found
          kubectl wait --for=delete csv -l operators.coreos.com/$NAME.$NAMESPACE='' -n $NAMESPACE --timeout=60s || echo "CSV deletion timed out, continuing..."

          echo "Finding and cleaning up all ArgoCD resources..."
          # Get all ArgoCD resources across all namespaces
          kubectl get argocd --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{" "}{.metadata.name}{"\n"}{end}' | while read -r ns name; do
            if [ -n "$ns" ] && [ -n "$name" ]; then
              echo "  - Found ArgoCD $name in namespace $ns"
              
              # Try normal deletion first
              kubectl delete argocd $name -n $ns --ignore-not-found --timeout=15s 2>/dev/null || true
              
              # Check if still exists (likely stuck with finalizers)
              if kubectl get argocd $name -n $ns >/dev/null 2>&1; then
                echo "    ArgoCD $name stuck, removing finalizers..."
                
                # Remove finalizers using JSON patch
                kubectl patch argocd $name -n $ns --type='merge' -p '{"metadata":{"finalizers":[]}}' || true
                
                # Force delete
                kubectl delete argocd $name -n $ns --force --grace-period=0 2>/dev/null || true
                
                echo "    ArgoCD $name force deleted"
              else
                echo "    ArgoCD $name deleted successfully"
              fi
            fi
          done

          echo "Cleaning up AppProjects and Applications in managed namespaces..."
          echo "$ARGOCD_NAMESPACES" | tr ',' '\n' | while read -r ns; do
            if [ -n "$ns" ]; then
              echo "  - Cleaning namespace $ns"
              kubectl delete appproject default -n $ns --ignore-not-found --timeout=15s 2>/dev/null || true
              kubectl delete application -l app.kubernetes.io/managed-by=Helm -n $ns --ignore-not-found --timeout=15s 2>/dev/null || true
            fi
          done

          echo "Cleanup finished."

{{- end }}
