{{- if and (default false .Values.orchestrator.enabled) (default false .Values.orchestrator.serverlessLogicOperator.enabled) }}
{{- $sonataflowplatformExists := lookup "sonataflow.org/v1alpha08" "SonataFlowPlatform" .Release.Namespace "sonataflow-platform" }}
{{- if and .Release.IsInstall $sonataflowplatformExists }}
{{- fail "Cannot create multiple sonataflowplatform in the same namespace, one already exists." }}
{{- end }}

apiVersion: sonataflow.org/v1alpha08
kind: SonataFlowPlatform
metadata:
  name: sonataflow-platform
  namespace: {{ .Release.Namespace }}
spec:
  monitoring:
    enabled: {{ .Values.orchestrator.sonataflowPlatform.monitoring.enabled }}
  build:
    template:
      resources:
        requests:
          memory: {{ .Values.orchestrator.sonataflowPlatform.resources.requests.memory }}
          cpu: {{ .Values.orchestrator.sonataflowPlatform.resources.requests.cpu }}
        limits:
          memory: {{ .Values.orchestrator.sonataflowPlatform.resources.limits.memory }}
          cpu: {{ .Values.orchestrator.sonataflowPlatform.resources.limits.cpu }}
  {{- if (and (.Values.orchestrator.sonataflowPlatform.eventing.broker.name) (.Values.orchestrator.sonataflowPlatform.eventing.broker.namespace)) }}
  eventing:
    broker:
      ref:
        apiVersion: eventing.knative.dev/v1
        kind: Broker
        name: {{ .Values.orchestrator.sonataflowPlatform.eventing.broker.name }}
        namespace: {{ .Values.orchestrator.sonataflowPlatform.eventing.broker.namespace }}
  {{- end }}
  services:
    dataIndex:
      enabled: true
      persistence:
        postgresql:
{{- if .Values.upstream.postgresql.enabled }}
          secretRef:
            name: {{ .Release.Name }}-postgresql-svcbind-postgres
            userKey: username
            passwordKey: password
          serviceRef:
            name: {{ .Release.Name }}-postgresql{{- if eq .Values.upstream.postgresql.architecture "replication" }}-primary{{- end }}
            namespace: {{ .Release.Namespace }}
            databaseName: sonataflow
{{- else }}
          secretRef:
            name: {{ .Values.orchestrator.sonataflowPlatform.externalDBsecretRef }}
            userKey: POSTGRES_USER
            passwordKey: POSTGRES_PASSWORD
          jdbcUrl: jdbc:postgresql://{{ .Values.orchestrator.sonataflowPlatform.externalDBHost }}:{{ .Values.orchestrator.sonataflowPlatform.externalDBPort }}/sonataflow?currentSchema=data-index-service
{{- end }}
{{- if .Values.orchestrator.sonataflowPlatform.dataIndexImage }}
      podTemplate:
        container:
          image: {{ .Values.orchestrator.sonataflowPlatform.dataIndexImage }}
{{- end }}
    jobService:
      enabled: true
      persistence:
        postgresql:
{{- if .Values.upstream.postgresql.enabled }}
          secretRef:
            name: {{ .Release.Name }}-postgresql-svcbind-postgres
            userKey: username
            passwordKey: password
          serviceRef:
            name: {{ .Release.Name }}-postgresql{{- if eq .Values.upstream.postgresql.architecture "replication" }}-primary{{- end }}
            namespace: {{ .Release.Namespace }}
            databaseName: sonataflow
{{- else }}
          secretRef:
            name: {{ .Values.orchestrator.sonataflowPlatform.externalDBsecretRef }}
            userKey: POSTGRES_USER
            passwordKey: POSTGRES_PASSWORD
          jdbcUrl: jdbc:postgresql://{{ .Values.orchestrator.sonataflowPlatform.externalDBHost }}:{{ .Values.orchestrator.sonataflowPlatform.externalDBPort }}/sonataflow?currentSchema=jobs-service
{{- end }}
{{- if .Values.orchestrator.sonataflowPlatform.jobServiceImage }}
      podTemplate:
        container:
          image: {{ .Values.orchestrator.sonataflowPlatform.jobServiceImage }}
{{- end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-create-sonataflow-database
  namespace: {{ .Release.Namespace }}
spec:
  activeDeadlineSeconds: 120
  template:
    spec:
      initContainers:
        - name: wait-for-db
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          image: "{{- tpl .Values.orchestrator.sonataflowPlatform.initContainerImage . -}}"
          resources:
            limits:
              cpu: "100m"
              memory: "64Mi"
            requests:
              cpu: "50m"
              memory: "32Mi"
          command:
            - bash
            - -c
            - |
{{- if .Values.upstream.postgresql.enabled }}
              dbHost="{{ .Release.Name }}-postgresql{{- if eq .Values.upstream.postgresql.architecture "replication" }}-primary{{- end }}"
              dbPort="5432"
{{- else }}
              dbHost=${POSTGRES_HOST}
              dbPort=${POSTGRES_PORT}
{{- end }}
              until timeout 2 bash -c ">/dev/tcp/$dbHost/$dbPort"; do
                echo 'Waiting for DB...'
                sleep 2
              done
              echo 'Connection made!'
{{- if not .Values.upstream.postgresql.enabled }}
          env:
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.orchestrator.sonataflowPlatform.externalDBsecretRef }}
                  key: POSTGRES_HOST
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.orchestrator.sonataflowPlatform.externalDBsecretRef }}
                  key: POSTGRES_PORT
{{- end }}
      containers:
      - name: psql
        image: "{{- tpl .Values.orchestrator.sonataflowPlatform.createDBJobImage . -}}"
        resources:
          limits:
            cpu: "100m"
            memory: "128Mi"
          requests:
            cpu: "100m"
            memory: "64Mi"
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
        env:
{{- if .Values.upstream.postgresql.enabled }}
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-postgresql-svcbind-postgres
              key: password
{{- else }}
          - name: POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.orchestrator.sonataflowPlatform.externalDBsecretRef }}
                key: POSTGRES_HOST
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.orchestrator.sonataflowPlatform.externalDBsecretRef }}
                key: POSTGRES_USER
          - name: POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.orchestrator.sonataflowPlatform.externalDBsecretRef }}
                key: POSTGRES_PORT
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.orchestrator.sonataflowPlatform.externalDBsecretRef }}
                key: POSTGRES_PASSWORD
{{- end }}
        command: [ "sh", "-c" ]
{{- if .Values.upstream.postgresql.enabled }}
        args:
          - "psql -h {{ .Release.Name }}-postgresql{{- if eq .Values.upstream.postgresql.architecture "replication" }}-primary{{- end }} -p 5432 -U postgres -c 'CREATE DATABASE sonataflow;' || echo WARNING: Could not create database"
{{- else }}
        args:
          - "psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d {{ .Values.orchestrator.sonataflowPlatform.externalDBName }} -c 'CREATE DATABASE sonataflow;' || echo WARNING: Could not create database"
{{- end }}
      restartPolicy: Never
  backoffLimit: 2
{{- end }}
