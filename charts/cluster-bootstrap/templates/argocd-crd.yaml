apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    helm.sh/hook: post-install
  finalizers:
  - argoproj.io/finalizer
  name: cluster-gitops
  namespace: openshift-gitops
spec:
  applicationInstanceLabelKey: argocd.argoproj.io/instance
  applicationSet:
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
    webhookServer:
      ingress:
        enabled: false
      route:
        enabled: false
  controller:
    processors: {}
    resources:
      limits:
        cpu: "4"
        memory: 4Gi
      requests:
        cpu: 500m
        memory: 2Gi
    sharding: {}
  grafana:
    enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
    route:
      enabled: false
  ha:
    enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  initialRepositories:
  {{ toYaml .Values.argocd.initialRepositories | nindent 4 }}
  initialSSHKnownHosts: {}
  monitoring:
    enabled: false
  notifications:
    enabled: false
  prometheus:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  rbac:
     defaultPolicy: ""
     policy: |
       g, cluster-admins, role:admin
     scopes: '[groups]'
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 250m
        memory: 128Mi
  repo:
    initContainers:
    - args:
      - curl -Lo /custom-tools/argocd-vault-plugin https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v{{ .Values.argocd.plugin.version }}/argocd-vault-plugin_{{ .Values.argocd.plugin.version }}_linux_amd64
        && chmod +x /custom-tools/argocd-vault-plugin
      command:
      - /bin/bash
      - -c
      # image: "{{ $.Values.ecr_account }}.dkr.ecr.{{ $.Values.aws_region }}.amazonaws.com/platform_image"
      image: "{{ .Values.defaultImage }}"
      name: download-tools
      resources: {}
      volumeMounts:
      - mountPath: /custom-tools
        name: custom-tools
    mountsatoken: true
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
    serviceaccount: vplugin
    sidecarContainers:
    - command:
      - /var/run/argocd/argocd-cmp-server
      envFrom:
      - secretRef:
          name: argocd-vault-configuration
      # image: "{{ $.Values.ecr_account }}.dkr.ecr.{{ $.Values.aws_region }}.amazonaws.com/platform_image"
      image: "{{ .Values.defaultImage }}"
      name: avp
      resources: {}
      securityContext:
        runAsNonRoot: true
      volumeMounts:
      - mountPath: /var/run/argocd
        name: var-files
      - mountPath: /home/argocd/cmp-server/plugins
        name: plugins
      - mountPath: /tmp
        name: tmp
      - mountPath: /home/argocd/cmp-server/config/plugin.yaml
        name: cmp-plugin
        subPath: avp-helm.yaml
      - mountPath: /usr/local/bin/argocd-vault-plugin
        name: custom-tools
        subPath: argocd-vault-plugin
    volumes:
    - configMap:
        name: cmp-plugin
      name: cmp-plugin
    - emptyDir: {}
      name: custom-tools
  resourceHealthChecks:
  - check: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.phase ~= nil then
          if obj.status.phase == "Pending" then
            hs.status = "Healthy"
            hs.message = obj.status.phase
            return hs
          elseif obj.status.phase == "Bound" then
            hs.status = "Healthy"
            hs.message = obj.status.phase
            return hs
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Waiting for PVC"
      return hs
    kind: PersistentVolumeClaim
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    route:
      enabled: true
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: reencrypt
    service:
      type: ""
  sso:
    dex:
      openShiftOAuth: true
      resources:
        limits:
          cpu: 500m
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 128Mi
    provider: dex
  tls:
    ca: {}