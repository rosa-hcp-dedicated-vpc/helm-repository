namespace: backstage
redhat-developer-hub:
  #helm repo add backstage https://janus-idp.github.io/helm-backstage
  #helm repo update
  #oc project backstage
  #helm install backstage backstage/backstage --values values.yaml
  global:
    auth:
      backend:
        enabled: true
    clusterRouterBase: holder
    dynamic:
      includes:
        - dynamic-plugins.default.yaml
      plugins:
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-community-plugin-redhat-argocd
        - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
          disabled: false
        - package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic
          disabled: false
        - package: ./dynamic-plugins/dist/backstage-community-plugin-tekton
          pluginConfig:
            dynamicPlugins:
              frontend:
                backstage-community.plugin-tekton:
                  mountPoints:
                    - mountPoint: entity.page.ci/cards
                      importName: TektonCI
                      config:
                        layout:
                          gridColumn: "1 / -1"
                          gridRowStart: 1
                        if:
                          allOf:
                            - isTektonCIAvailable
          disabled: false
        # - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab-backend-dynamic
        #   disabled: false
        # - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab
        #   disabled: false
        # - disabled: false
        #   package: ./dynamic-plugins/dist/backstage-plugin-scaffolder-backend-module-gitlab-dynamic
        - package: ./dynamic-plugins/dist/backstage-community-plugin-quay
          disabled: false
        - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
          disabled: false
        - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
          disabled: false
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-community-plugin-topology
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-plugin-techdocs
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-community-plugin-catalog-backend-module-keycloak-dynamic
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-community-plugin-ocm
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-community-plugin-ocm-backend-dynamic
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-community-plugin-tech-radar
        - disabled: false
          integrity: sha512-9cXbedr0lC7ns7SNqARrWSQI4JGcZFw5xpfpUzA1tJaMMUjzAdPHTXqljf62/fs4hYBK8TJsWJ2KJkGVMzbrHQ==
          package: '@redhat/backstage-plugin-orchestrator-backend-dynamic@1.7.1'
          pluginConfig:
            orchestrator:
              dataIndexService:
                url: http://sonataflow-platform-data-index-service
        - disabled: false
          integrity: sha512-Cqu9EQwVQ4mpdgWTUA0MW89Gul0IklhvkkqVoO3CloQ1dnAj1XyXikCphzH5TmNDDd9K66dOpaKKCaW9KeJ4WA==
          package: '@redhat/backstage-plugin-orchestrator@1.7.1'
          pluginConfig:
            dynamicPlugins:
              frontend:
                red-hat-developer-hub.backstage-plugin-orchestrator:
                  appIcons:
                  - importName: OrchestratorIcon
                    name: orchestratorIcon
                  dynamicRoutes:
                  - importName: OrchestratorPage
                    menuItem:
                      icon: orchestratorIcon
                      text: Orchestrator
                    path: /orchestrator
        - disabled: false
          integrity: sha512-J1sTjA5kj6DphG8D65go9KlpIfKyLN/wq+XlY5Cb5djEo8mvF3wn3Haf60OGFo5cP4OfRSWqFwT7LM5/dNVwAg==
          package: '@redhat/backstage-plugin-scaffolder-backend-module-orchestrator-dynamic@1.7.1'
          pluginConfig:
            orchestrator:
              dataIndexService:
                url: http://sonataflow-platform-data-index-service
        - disabled: false
          integrity: sha512-0KIXrZoJ+O4xNNzN/zB4+VMuaRPuiUviAmM+fIhTo/P9aLA36F9aIlyMbUbki49uaJ0zd8KXMBvmJSHZNrYkGQ==
          package: '@redhat/backstage-plugin-orchestrator-form-widgets@1.7.1'
          pluginConfig:
            dynamicPlugins:
              frontend:
                red-hat-developer-hub.backstage-plugin-orchestrator-form-widgets: {}
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-plugin-notifications
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-plugin-signals
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-plugin-notifications-backend-dynamic
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-plugin-signals-backend-dynamic
  
  upstream:
    backstage:
      image:
        registry: quay.io
        repository: rhdh/rhdh-hub-rhel9
        tag: '1.7-154'
        pullSecrets:
        - redhat-gpte-devhub-pull-secret
      extraEnvVars:
        - name: NODE_OPTIONS
          value: --no-node-snapshot
        - name: BACKEND_SECRET
          value: "{{ randAlphaNum 24 | b64enc }}"
        - name: POSTGRES_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: backstage-postgresql
        - name: NODE_TLS_REJECT_UNAUTHORIZED
          value: "0"
        - name: KEYCLOAK_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: CLIENT_ID
              name: keycloak-client-secret-backstage
        - name: KEYCLOAK_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: CLIENT_SECRET
              name: keycloak-client-secret-backstage
        - name: LOG_LEVEL
          value: debug
      extraContainers:
        - name: oauth2-proxy
          env:
            - name: OAUTH2_PROXY_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  key: CLIENT_ID
                  name: keycloak-client-secret-backstage
            - name: OAUTH2_PROXY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  key: CLIENT_SECRET
                  name: keycloak-client-secret-backstage
            - name: OAUTH2_PROXY_COOKIE_SECRET
              value: "{{ randAlpha 32 | lower | b64enc }}"
            - name: OAUTH2_PROXY_OIDC_ISSUER_URL
              value: holder
            - name: OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY
              value: 'true'
          ports:
            - name: oauth2-proxy
              containerPort: 4180
              protocol: TCP
          imagePullPolicy: IfNotPresent
          image: 'quay.io/oauth2-proxy/oauth2-proxy:latest'
          args:
            - '--provider=oidc'
            - '--email-domain=*'
            - '--upstream=http://localhost:7007'
            - '--http-address=0.0.0.0:4180'
            - '--skip-provider-button'
            - '--insecure-oidc-allow-unverified-email=true' 
      appConfig:
        app:
          baseUrl: holder
        backend:
          baseUrl: holder
          listen:
            port: 7007
            host: 0.0.0.0
          csp:
            script-src: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
            script-src-elem: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
            img-src: ["'self'", 'data:']
            connect-src: ["'self'", 'http:', 'https:', 'data:']
          cors:
            origin: holder
            methods: [GET, POST, PUT, DELETE]
            credentials: true
          database:
            client: pg
            connection:
              database: postgres
              host: "${POSTGRES_HOST}"
              port: "${POSTGRES_PORT}"
              user: postgres
              password: "${POSTGRES_ADMIN_PASSWORD}"
          reading:
            allow:
              - host: holder
  
        integrations:
        ######### COMMENTED OUT ##########
          # gitlab:
          # - host: gitlab-gitlab.apps.cluster-lnk9m.dynamic.redhatworkshops.io
          #   baseUrl: https://gitlab-gitlab.apps.cluster-lnk9m.dynamic.redhatworkshops.io
          #   apiBaseUrl: https://gitlab-gitlab.apps.cluster-lnk9m.dynamic.redhatworkshops.io/api/v4
          #   token: glpat-DCusK7bAdBX5jGrGCPq8
  
        # proxy:
        #   endpoints:
        #     '/quay/api':
        #       target: {{ .Values.quay.apiUrl }}
        #       headers:
        #         X-Requested-With: 'XMLHttpRequest'
        #         # Uncomment the following line to access a private Quay Repository using a token
        #         Authorization: 'Bearer 1LOQ7ZNVEUDIALE4WNL3ZBNPKBCR5D4F9UNISVAW'
        #       changeOrigin: true
        #       # Change to "false" in case of using self hosted quay instance with a self-signed certificate
        #       secure: false
        #     '/developer-hub':
        #       target: {{ .Values.github.baseUrl }}/
        #       pathRewrite:
        #         '^/api/proxy/developer-hub/tech-radar': /gitops/janus-idp-gitops/-/raw/main/config/tech-radar.json
        #       changeOrigin: true
        #       secure: false
  
        # quay:
        #   # The UI url for Quay, used to generate the link to Quay
        #   uiUrl: {{ .Values.quay.uiUrl }}
  
        techdocs:
          builder: local
          generator:
            runIn: local
          publisher:
            type: local
  
        auth:
          environment: production
          providers:
            oauth2Proxy: {}
          session:
            secret:
              $env: 'BACKEND_SECRET'
  
        signInPage: oidc
  
        scaffolder:
          # see https://backstage.io/docs/features/software-templates/configuration for software template options
  
        catalog:
          rules:
            - allow: [Domain, Component, System, API, Resource, Location, Template]
          locations:
            - target: holder
              type: url
              rules:
                - allow: [Template]
            - target: holder
              type: url
              rules:
                - allow: [Group, User]
            - target: holder
              type: url
              rules:
                - allow: [Template]
            - target: holder
              type: url
              rules:
                - allow: [Domain, Component, System, API, Resource, Location]
          providers:
            # gitlab:
            #   selfHosted:
            #     host: gitlab-gitlab.apps.cluster-lnk9m.dynamic.redhatworkshops.io
            #     schedule: # optional; same options as in TaskScheduleDefinition
            #       # supports cron, ISO duration, "human duration" as used in code
            #       frequency: { seconds: 10 }
            #       # supports ISO duration, "human duration" as used in code
            #       timeout: { seconds: 60 }
            ocm:
              default:
                name: multiclusterhub
                kubernetesPluginRef: dev-cluster-infra
                schedule: # optional; same options as in TaskScheduleDefinition
                  # supports cron, ISO duration, "human duration" as used in code
                  frequency: { seconds: 10 }
                  # supports ISO duration, "human duration" as used in code
                  timeout: { seconds: 60 }
                owner: group:rhdh
            keycloakOrg:
              default:
                baseUrl: holder
                loginRealm: backstage
                realm: backstage
                clientId: ${KEYCLOAK_CLIENT_ID}
                clientSecret: ${KEYCLOAK_CLIENT_SECRET}
  
        # argocd:
        #   appLocatorMethods:
        #     - type: 'config'
        #       instances:
        #         - name: main
        #           url: {{ .Values.argocd.serverUrl }}
        #           username: admin
        #           password: Mjc2NDk2
  
        kubernetes:
          serviceLocatorMethod:
            type: "multiTenant"
          clusterLocatorMethods:
            - type: "config"
              clusters:
                - name: dev-cluster-infra
                  url: holder
                  authProvider: "serviceAccount"
                  skipTLSVerify: true
                  serviceAccountToken: eyJhbGciOiJSUzI1NiIsImtpZCI6IkUzc2IzTlZ3OUhpSDVfbEExMDdLRHl2TEdaemVOSWh0T0JHLVhUbXFCTzgifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImFkYWZiMDA5LTU5YTMtNGZiMC1hMDVlLTM0MGUwMWYxN2FiMiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.dTK1gr0dO259c3Me5WhogSrJdu2pK_RN-Gb4BIFTklx7ldZuYdC87fDTA-OFQroD51l1bytNy01qs7dS6F0qYBc8q3T5qVTTTdMw_6IhsKLNrq7fr2M5ZjdD5d7EcGurOBIbz4qkKct75UvisfsfXGu6aAUCLriX5AU5F2arLXSBk__D73oXvHoNlei6Ewf3iyvTcdchLklbGsjXGCJc4MmUIeylkFeJ5EAEGS3hKw3-sen6sATavdvDTut-WPY4m2ZrDRfbd0rulPGYyneiMxSMYAhDfwKa7ef4EwHT6kNvJcECuGwbFWto8NNnAm8EmKm4CpDGnKU2FVAJHHGNAVmrtbeTd91k0sVnDv8mcPFXndbt2e2tcbro4Q_MLvAANuaQtNPGLfj8vnywbW09DpE_yUXMvUq2ZNUQft41bJ47xHSRl64_VR346ak7Tr_XIPVdo_l2ZM0zyZ8s61y6xO12xftc34QZFwDuCCcxGev22WOL6fgK6JPL3bGpQxVlWlDcqZ2nKfSpDnKvCB2efoGYjiw64U8n0rdMrMJmjht8n5BQnz-Mcw3Ba-4zqV8iEXa9SsCYWwq7NsshwR9x5bA49pvyO3PlHcWsAJyOm_yICdlTnFNPooGjfTOdgxUTbS2MrD13Uau-EN2RwtiaeWhO-e1XGmh3P2f6ldwU3L0
          customResources:
            - group: 'tekton.dev'
              apiVersion: 'v1beta1'
              plural: 'pipelineruns'
            - group: 'tekton.dev'
              apiVersion: 'v1beta1'
              plural: 'taskruns'
            - group: 'route.openshift.io'
              apiVersion: 'v1'
              plural: 'routes'
  
        permission:
          enabled: false
  
        enabled:
          kubernetes: true
          techdocs: true
          argocd: true
          sonarqube: false
          keycloak: true
          ocm: true
          github: true
          githubOrg: false
          jenkins: false
          permission: false
  
    postgresql:
      auth:
        username: bn_backstage
        password: Mjc2NDk2
        database: postgres
  
        # Admin user (superuser)
        postgresUser: postgres
        postgresPassword: Mjc2NDk2
  
    service:
      ports:
        backend: 7007
        targetPort: backend
  
  route:
    enabled: true
    host: holder
    tls:
      enabled: true
      termination: "edge"
  
  orchestrator:
    enabled: true
    serverlessLogicOperator:
      enabled: true
    serverlessOperator:
      enabled: true
    sonataflowPlatform:
      monitoring:
        enabled: true
      eventing:
        broker:
          name: ""
          namespace: ""
      resources:
        requests:
          memory: "64Mi"
          cpu: "250m"
        limits:
          memory: "1Gi"
          cpu: "500m"
      # -- Secret name for the user-created secret to connect an external DB
      externalDBsecretRef: ""
      # -- Name for the user-configured external Database
      externalDBName: ""
      # -- Host for the user-configured external Database
      externalDBHost: ""
      # -- Port for the user-configured external Database
      externalDBPort: ""
      # -- Image for the init container used by the create-db job
  
      initContainerImage: "{{ .Values.upstream.postgresql.image.registry }}/{{ .Values.upstream.postgresql.image.repository }}:{{ .Values.upstream.postgresql.image.tag }}"
      # -- Image for the container used by the create-db job
      createDBJobImage: "{{ .Values.upstream.postgresql.image.registry }}/{{ .Values.upstream.postgresql.image.repository }}:{{ .Values.upstream.postgresql.image.tag }}"
    # -- Orchestrator plugins and their configuration
    plugins: []
