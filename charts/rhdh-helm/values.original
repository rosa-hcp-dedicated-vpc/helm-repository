namespace: backstage
redhat-developer-hub:
  
  #helm repo add backstage https://janus-idp.github.io/helm-backstage
  #helm repo update
  #oc project backstage
  #helm install backstage backstage/backstage --values values.yaml
  global:
    auth:
      backend:
        enabled: true
    clusterRouterBase: apps.cluster-str8b.dynamic.redhatworkshops.io
    dynamic:
      includes:
        - dynamic-plugins.default.yaml
      plugins:
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-community-plugin-redhat-argocd
        - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
          disabled: false
        - package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic
          disabled: false
        - package: ./dynamic-plugins/dist/backstage-community-plugin-tekton
          pluginConfig:
            dynamicPlugins:
              frontend:
                backstage-community.plugin-tekton:
                  mountPoints:
                    - mountPoint: entity.page.ci/cards
                      importName: TektonCI
                      config:
                        layout:
                          gridColumn: "1 / -1"
                          gridRowStart: 1
                        if:
                          allOf:
                            - isTektonCIAvailable
          disabled: false
        - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab-backend-dynamic
          disabled: false
        - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab
          disabled: false
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-plugin-scaffolder-backend-module-gitlab-dynamic
        - package: ./dynamic-plugins/dist/backstage-community-plugin-quay
          disabled: false
        - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
          disabled: false
        - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
          disabled: false
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-community-plugin-topology
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-plugin-techdocs
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-community-plugin-catalog-backend-module-keycloak-dynamic
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-community-plugin-ocm
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-community-plugin-ocm-backend-dynamic
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-community-plugin-tech-radar
        - disabled: false
          integrity: sha512-9cXbedr0lC7ns7SNqARrWSQI4JGcZFw5xpfpUzA1tJaMMUjzAdPHTXqljf62/fs4hYBK8TJsWJ2KJkGVMzbrHQ==
          package: '@redhat/backstage-plugin-orchestrator-backend-dynamic@1.7.1'
          pluginConfig:
            orchestrator:
              dataIndexService:
                url: http://sonataflow-platform-data-index-service
        - disabled: false
          integrity: sha512-Cqu9EQwVQ4mpdgWTUA0MW89Gul0IklhvkkqVoO3CloQ1dnAj1XyXikCphzH5TmNDDd9K66dOpaKKCaW9KeJ4WA==
          package: '@redhat/backstage-plugin-orchestrator@1.7.1'
          pluginConfig:
            dynamicPlugins:
              frontend:
                red-hat-developer-hub.backstage-plugin-orchestrator:
                  appIcons:
                  - importName: OrchestratorIcon
                    name: orchestratorIcon
                  dynamicRoutes:
                  - importName: OrchestratorPage
                    menuItem:
                      icon: orchestratorIcon
                      text: Orchestrator
                    path: /orchestrator
        - disabled: false
          integrity: sha512-J1sTjA5kj6DphG8D65go9KlpIfKyLN/wq+XlY5Cb5djEo8mvF3wn3Haf60OGFo5cP4OfRSWqFwT7LM5/dNVwAg==
          package: '@redhat/backstage-plugin-scaffolder-backend-module-orchestrator-dynamic@1.7.1'
          pluginConfig:
            orchestrator:
              dataIndexService:
                url: http://sonataflow-platform-data-index-service
        - disabled: false
          integrity: sha512-0KIXrZoJ+O4xNNzN/zB4+VMuaRPuiUviAmM+fIhTo/P9aLA36F9aIlyMbUbki49uaJ0zd8KXMBvmJSHZNrYkGQ==
          package: '@redhat/backstage-plugin-orchestrator-form-widgets@1.7.1'
          pluginConfig:
            dynamicPlugins:
              frontend:
                red-hat-developer-hub.backstage-plugin-orchestrator-form-widgets: {}
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-plugin-notifications
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-plugin-signals
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-plugin-notifications-backend-dynamic
        - disabled: false
          package: ./dynamic-plugins/dist/backstage-plugin-signals-backend-dynamic
  
  upstream:
    backstage:
      image:
        registry: quay.io
        repository: rhdh/rhdh-hub-rhel9
        tag: '1.7-154'
        pullSecrets:
        - redhat-gpte-devhub-pull-secret
      extraEnvVars:
        - name: NODE_OPTIONS
          value: --no-node-snapshot
        - name: BACKEND_SECRET
          value: "{{ randAlphaNum 24 | b64enc }}"
        - name: POSTGRES_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: backstage-postgresql
        - name: NODE_TLS_REJECT_UNAUTHORIZED
          value: "0"
        - name: KEYCLOAK_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: CLIENT_ID
              name: keycloak-client-secret-backstage
        - name: KEYCLOAK_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: CLIENT_SECRET
              name: keycloak-client-secret-backstage
        - name: LOG_LEVEL
          value: debug
      extraContainers:
        - name: oauth2-proxy
          env:
            - name: OAUTH2_PROXY_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  key: CLIENT_ID
                  name: keycloak-client-secret-backstage
            - name: OAUTH2_PROXY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  key: CLIENT_SECRET
                  name: keycloak-client-secret-backstage
            - name: OAUTH2_PROXY_COOKIE_SECRET
              value: "{{ randAlpha 32 | lower | b64enc }}"
            - name: OAUTH2_PROXY_OIDC_ISSUER_URL
              value: https://keycloak-rhsso.apps.cluster-str8b.dynamic.redhatworkshops.io/auth/realms/backstage
            - name: OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY
              value: 'true'
          ports:
            - name: oauth2-proxy
              containerPort: 4180
              protocol: TCP
          imagePullPolicy: IfNotPresent
          image: 'quay.io/oauth2-proxy/oauth2-proxy:latest'
          args:
            - '--provider=oidc'
            - '--email-domain=*'
            - '--upstream=http://localhost:7007'
            - '--http-address=0.0.0.0:4180'
            - '--skip-provider-button'
            - '--insecure-oidc-allow-unverified-email=true'
  
      appConfig:
        app:
          baseUrl: https://backstage-backstage.apps.cluster-str8b.dynamic.redhatworkshops.io
        backend:
          baseUrl: https://backstage-backstage.apps.cluster-str8b.dynamic.redhatworkshops.io
          listen:
            port: 7007
            host: 0.0.0.0
          csp:
            script-src: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
            script-src-elem: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
            img-src: ["'self'", 'data:']
            connect-src: ["'self'", 'http:', 'https:', 'data:']
          cors:
            origin: https://backstage-backstage.apps.cluster-str8b.dynamic.redhatworkshops.io
            methods: [GET, POST, PUT, DELETE]
            credentials: true
          database:
            client: pg
            connection:
              database: postgres
              host: "${POSTGRES_HOST}"
              port: "${POSTGRES_PORT}"
              user: postgres
              password: "${POSTGRES_ADMIN_PASSWORD}"
          reading:
            allow:
              - host: '*.apps.cluster-str8b.dynamic.redhatworkshops.io'
  
        integrations:
          gitlab:
          - host: gitlab-gitlab.apps.cluster-str8b.dynamic.redhatworkshops.io
            baseUrl: https://gitlab-gitlab.apps.cluster-str8b.dynamic.redhatworkshops.io
            apiBaseUrl: https://gitlab-gitlab.apps.cluster-str8b.dynamic.redhatworkshops.io/api/v4
            token: glpat-o3sT1jWHsYrF9SLG4f2z
  
        proxy:
          endpoints:
            '/quay/api':
              target: 'https://quay-str8b-1.apps.cluster-str8b.dynamic.redhatworkshops.io'
              headers:
                X-Requested-With: 'XMLHttpRequest'
                # Uncomment the following line to access a private Quay Repository using a token
                Authorization: 'Bearer 6WOS7AUKEOB0FDDPWOHA7CYOWIS6HQD8XDEXG4O0'
              changeOrigin: true
              # Change to "false" in case of using self hosted quay instance with a self-signed certificate
              secure: false
            '/developer-hub':
              target: https://gitlab-gitlab.apps.cluster-str8b.dynamic.redhatworkshops.io/
              pathRewrite:
                '^/api/proxy/developer-hub/tech-radar': /gitops/janus-idp-gitops/-/raw/main/config/tech-radar.json
              changeOrigin: true
              secure: false
  
        quay:
          # The UI url for Quay, used to generate the link to Quay
          uiUrl: 'https://quay-str8b-1.apps.cluster-str8b.dynamic.redhatworkshops.io'
  
        techdocs:
          builder: local
          generator:
            runIn: local
          publisher:
            type: local
  
        auth:
          environment: production
          providers:
            oauth2Proxy: {}
          session:
            secret:
              $env: 'BACKEND_SECRET'
  
        signInPage: oauth2Proxy
  
        scaffolder:
          # see https://backstage.io/docs/features/software-templates/configuration for software template options
  
        catalog:
          rules:
            - allow: [Domain, Component, System, API, Resource, Location, Template]
          locations:
            - target: https://gitlab-gitlab.apps.cluster-str8b.dynamic.redhatworkshops.io/rhdh/developer-hub-software-templates/blob/main/showcase-templates.yaml
              type: url
              rules:
                - allow: [Template]
            - target: https://gitlab-gitlab.apps.cluster-str8b.dynamic.redhatworkshops.io/rhdh/developer-hub-software-templates/blob/main/org.yaml
              type: url
              rules:
                - allow: [Group, User]
            - target: https://gitlab-gitlab.apps.cluster-str8b.dynamic.redhatworkshops.io/summit-lab/backstage-workshop/blob/master/showcase-templates.yaml
              type: url
              rules:
                - allow: [Template]
            - target: https://gitlab-gitlab.apps.cluster-str8b.dynamic.redhatworkshops.io/rhdh-entities/rhdh-demo-entities/blob/main/locations.yaml
              type: url
              rules:
                - allow: [Domain, Component, System, API, Resource, Location]
          providers:
            gitlab:
              selfHosted:
                host: gitlab-gitlab.apps.cluster-str8b.dynamic.redhatworkshops.io
                schedule: # optional; same options as in TaskScheduleDefinition
                  # supports cron, ISO duration, "human duration" as used in code
                  frequency: { seconds: 10 }
                  # supports ISO duration, "human duration" as used in code
                  timeout: { seconds: 60 }
            ocm:
              default:
                name: multiclusterhub
                kubernetesPluginRef: dev-cluster-infra
                schedule: # optional; same options as in TaskScheduleDefinition
                  # supports cron, ISO duration, "human duration" as used in code
                  frequency: { seconds: 10 }
                  # supports ISO duration, "human duration" as used in code
                  timeout: { seconds: 60 }
                owner: group:rhdh
            keycloakOrg:
              default:
                baseUrl: keycloak-rhsso.apps.cluster-str8b.dynamic.redhatworkshops.io/auth
                loginRealm: backstage
                realm: backstage
                clientId: ${KEYCLOAK_CLIENT_ID}
                clientSecret: ${KEYCLOAK_CLIENT_SECRET}
  
        argocd:
          appLocatorMethods:
            - type: 'config'
              instances:
                - name: main
                  url: 	https://argocd-server-janus-argocd.apps.cluster-str8b.dynamic.redhatworkshops.io
                  username: admin
                  password: MzIzMTQ4
  
        kubernetes:
          serviceLocatorMethod:
            type: "multiTenant"
          clusterLocatorMethods:
            - type: "config"
              clusters:
                - name: dev-cluster-infra
                  url: https://api.cluster-str8b.dynamic.redhatworkshops.io:6443
                  authProvider: "serviceAccount"
                  skipTLSVerify: true
                  serviceAccountToken: eyJhbGciOiJSUzI1NiIsImtpZCI6IkFfVHZpekNfUGt1cDROVU53bV8yMVFRNHZHMGExZmszbzNFYjlNMS1tVFkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijg5ODQ2N2VmLTM0ZDctNDU4Zi1iMGZkLTYyNTE1ZGQwM2U3OCIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.AAaOIRtOQyFqbJh9cNUjHwgnL8rnk2DfJb7PkdQDdYV9XgpNePZXZvHdMwaOm3HUoksKOocYY9BmX14utGvoHidgk_-rTgi8vZNp30T2wiw8mdX7P6FLFYYMG2Mlo12FzZZjCybDMjXnKZCDZADSGzVGm12PQu6RwdM-I0nNWmI86tvM9MESvZQLsAx50mNN6ZASRbprn5ikfszAPLjdtUb6gn_TdKRzFqvRR9d4Edwq7ZTLy_x4Ssr2Zq0hfA5Li9zNJJuExy1dmzRYtislYSyLtxXLOUjMx69AK9sB1l1eMBzOI4faAJ34Hw7lhazP9KLnEBbXcLxuLZWpB7oPbMibOsaPttcukgO2Nceylin03SwCuc53AHxPuWNmXws3tSktrj2NJokQ6bUfkEvuR0Q_zj58bVCPZiQlgOYgR5w8VDmT4u0NUASeabjRkUPaeWZGT8u5eYPIOWAKR8QlwRB-xz6BqaAYEqKGxhp8tTxu8J3TI9lJQPU7qp29CSQzfa51L3a8gpnD-ZAtW-MDCy2rrqj6qX9FdTH-Y_u3Cjuuq6lzGeKv3dIoOi5eCilp3GsxlF1xoYxYx4BpHzKIUCc0lNKtWvDEtgy0CNaJYd7E7DS8FNKp296Z7ZE9sdhYq6vuMMydOv9yiA_fKrgUzLF8jIiecWwm5T7_A4yh-M8
          customResources:
            - group: 'tekton.dev'
              apiVersion: 'v1beta1'
              plural: 'pipelineruns'
            - group: 'tekton.dev'
              apiVersion: 'v1beta1'
              plural: 'taskruns'
            - group: 'route.openshift.io'
              apiVersion: 'v1'
              plural: 'routes'
  
        permission:
          enabled: false
  
        enabled:
          kubernetes: true
          techdocs: true
          argocd: true
          sonarqube: false
          keycloak: true
          ocm: true
          github: false
          githubOrg: false
          gitlab: true
          jenkins: false
          permission: false
  
    postgresql:
      auth:
        username: bn_backstage
        password: MzIzMTQ4
        database: postgres
  
        # Admin user (superuser)
        postgresUser: postgres
        postgresPassword: MzIzMTQ4
  
    service:
      ports:
        backend: 4180
        targetPort: oauth2-proxy
  
  route:
    enabled: true
    host: backstage-backstage.apps.cluster-str8b.dynamic.redhatworkshops.io
    tls:
      enabled: true
      termination: "edge"
  
  orchestrator:
    enabled: true
    serverlessLogicOperator:
      enabled: true
    serverlessOperator:
      enabled: true
    sonataflowPlatform:
      monitoring:
        enabled: true
      eventing:
        broker:
          name: ""
          namespace: ""
      resources:
        requests:
          memory: "64Mi"
          cpu: "250m"
        limits:
          memory: "1Gi"
          cpu: "500m"
      # -- Secret name for the user-created secret to connect an external DB
      externalDBsecretRef: ""
      # -- Name for the user-configured external Database
      externalDBName: ""
      # -- Host for the user-configured external Database
      externalDBHost: ""
      # -- Port for the user-configured external Database
      externalDBPort: ""
      # -- Image for the init container used by the create-db job
  
      initContainerImage: "{{ .Values.upstream.postgresql.image.registry }}/{{ .Values.upstream.postgresql.image.repository }}:{{ .Values.upstream.postgresql.image.tag }}"
      # -- Image for the container used by the create-db job
      createDBJobImage: "{{ .Values.upstream.postgresql.image.registry }}/{{ .Values.upstream.postgresql.image.repository }}:{{ .Values.upstream.postgresql.image.tag }}"
    # -- Orchestrator plugins and their configuration
    plugins: []
